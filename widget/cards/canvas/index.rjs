import F2 from '@antv/f2/lib/index';
import { windowAdapter, documentAdapter } from '@tuya-miniapp/rjs-adapter'

function copyProperties(target = {}, source = {}) {
  Object.keys(source).forEach(propName => {
    target[propName] = source[propName]
  });
}

windowAdapter((window) => copyProperties(window));
documentAdapter((document) => copyProperties(document));

let chart = '';
let chartA = '';

export default Render({
  async drawBuArc(newVal) {
    const canvas = await getCanvasById('bu');
    if (!chart) {
      chart = new F2.Chart({
        el: canvas,
        padding: 0,
        appendPadding: 0,
        pixelRatio: getSystemInfo().pixelRatio || 2
      });
    } else {
      chart.clear()
    }

    const data = [
      {
        x: '1',
        y: newVal.percent,
      },
    ];

    chart.source(data, {
      y: {
        max: 100,
        min: 0
      }
    });
    chart.axis(false);
    chart.tooltip(false);
    chart.coord('polar', {
      transposed: true,
      innerRadius: 0.9,
      radius: 1
    });
    chart.guide().arc({
      start: [ 0, 0 ],
      end: [ 1, 99.99 ],
      top: false,
      style: {
        lineWidth: 3,
        stroke: '#17C6D1',
        opacity: 0.3
      }
    });
    chart.guide().text({
      position: [ '50%', '45%' ],
      content: newVal.value || 0,
      style: {
        fill: '#17C6D1',
        fontSize: 22,
      }
    });
    chart.interval()
      .position('x*y')
      .size(3)
      .color('#17C6D1')
      .animate({
        appear: {
          duration: 1200,
          easing: 'cubicIn'
        }
      });
    chart.render();
  },
  async drawKcalArc(newVal) {
    const canvas = await getCanvasById('kcal');
    if (!chartA) {
      chartA = new F2.Chart({
        el: canvas,
        padding: 0,
        appendPadding: 0,
        pixelRatio: getSystemInfo().pixelRatio || 2
      });
    } else {
      chartA.clear()
    }

    const data = [
      {
        x: '1',
        y: newVal.percent,
      },
    ];

    chartA.source(data, {
      y: {
        max: 100,
        min: 0
      }
    });
    chartA.axis(false);
    chartA.tooltip(false);
    chartA.coord('polar', {
      transposed: true,
      innerRadius: 0.9,
      radius: 1
    });
    chartA.guide().arc({
      start: [ 0, 0 ],
      end: [ 1, 99.99 ],
      top: false,
      style: {
        lineWidth: 3,
        stroke: '#FF9900',
        opacity: 0.3
      }
    });
    chartA.guide().text({
      position: [ '50%', '45%' ],
      content: newVal.value || 0,
      style: {
        fill: '#FF9900',
        fontSize: 22,
      }
    });
    chartA.interval()
      .position('x*y')
      .size(3)
      .color('#FF9900')
      .animate({
        appear: {
          duration: 1200,
          easing: 'cubicIn'
        }
      });
    chartA.render();
  },
});
